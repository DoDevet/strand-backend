// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  userName  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  photos    Photo[]
  followers User[]    @relation("FollowRelation")
  following User[]    @relation("FollowRelation")
  likes     Like[]
  comments  Comment[]

  rooms     Room[]
  chatAdmin Room[] @relation("chat")
  message   Message[]

  admin       Community[]  @relation("admin")
  communityId Int?
  communities Community[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Photo {
  id      Int     @id @default(autoincrement())
  userId  Int
  caption String?
  file    String
  title String
  user User @relation(fields: [userId], references: [id])

  hashtags Hashtag[]
  likes    Like[]
  likesNum     Int     @default(0)
  comments Comment[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int?
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photoId   Int

  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  payload   String
  userId    Int
  photoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        Int       @id @default(autoincrement())
  users     User[]
  chatAdmin User? @relation("chat",fields: [chatAdminId], references: [id])
  chatAdminId Int?
  messages  Message[]
  title String
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  userId    Int
  roomId    Int
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id            Int    @id @default(autoincrement())
  communityName String @unique
  communityInfo String
  popularSetting Int @default(10)
  
  chatRooms Room[]
  users  User[] 
  photos Photo[] 
  admin  User[]  @relation("admin")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
